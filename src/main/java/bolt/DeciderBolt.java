package bolt;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import org.apache.storm.task.OutputCollector;
import org.apache.storm.task.TopologyContext;
import org.apache.storm.topology.OutputFieldsDeclarer;
import org.apache.storm.topology.base.BaseRichBolt;
import org.apache.storm.tuple.Fields;
import org.apache.storm.tuple.Tuple;
import org.apache.storm.tuple.Values;
import type.TumblrPost;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeciderBolt extends BaseRichBolt {
    private List<String> cPosts; //candidate posts that contains some keywords;
    private final int size = 10; //the total size of seeds
    private HashMap<String, String[]> seeds;
    private OutputCollector collector;
    private Gson gson;
    private String[] keywords;

    public DeciderBolt(String[] keywords) {
        this.keywords = keywords;
    }

    public final String SOME_MATCH_STREAM = "some match";
    public final String SEED_STREAM_ID = "seeds";
    public final String ON_TOPIC_STREAM = "on topic";

    @Override
    public void prepare(Map map, TopologyContext topologyContext, OutputCollector outputCollector) {
        this.cPosts = new ArrayList<>();
        this.seeds = new HashMap<>();
        this.gson = new GsonBuilder().create();
        this.collector = outputCollector;

    }

    @Override
    public void execute(Tuple tuple) {
        if(tuple.getSourceStreamId().equals(SOME_MATCH_STREAM)){
            //cPosts.add(tuple.getStringByField("raw posts"));
            this.collector.emit(ON_TOPIC_STREAM, new Values(tuple.getStringByField("raw posts")));
        } else if (tuple.getSourceStreamId().equals(SEED_STREAM_ID)){
            //String kw = tuple.getStringByField("keywords");
            //System.out.println(tuple.getString(0)+":"+tuple.getString(1));
        }
        // if collected all seeds generated by model
        //System.out.println("DeciderBolt now have "+seeds.size()+" seeds");

    }

    @Override
    public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer) {
        outputFieldsDeclarer.declareStream(ON_TOPIC_STREAM, new Fields("positive posts"));
    }
}
